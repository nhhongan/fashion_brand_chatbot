"""init

Revision ID: ef3e12ea7415
Revises: 
Create Date: 2024-11-29 22:21:03.020366

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pandas as pd
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision: str = 'ef3e12ea7415'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('payment',
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('payment_id')
    )
    op.create_index(op.f('ix_payment_payment_id'), 'payment', ['payment_id'], unique=False)
    op.create_index(op.f('ix_payment_type'), 'payment', ['type'], unique=False)
    op.create_table('product',
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('department', sa.String(), nullable=True),
    sa.Column('clothing', sa.String(), nullable=True),
    sa.Column('type_of_clothing', sa.String(), nullable=True),
    sa.Column('price', sa.String(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('product_id')
    )
    op.create_index(op.f('ix_product_clothing'), 'product', ['clothing'], unique=False)
    op.create_index(op.f('ix_product_color'), 'product', ['color'], unique=False)
    op.create_index(op.f('ix_product_department'), 'product', ['department'], unique=False)
    op.create_index(op.f('ix_product_name'), 'product', ['name'], unique=False)
    op.create_index(op.f('ix_product_price'), 'product', ['price'], unique=False)
    op.create_index(op.f('ix_product_product_id'), 'product', ['product_id'], unique=False)
    op.create_index(op.f('ix_product_type_of_clothing'), 'product', ['type_of_clothing'], unique=False)
    op.create_table('role',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('role_id')
    )
    op.create_index(op.f('ix_role_name'), 'role', ['name'], unique=False)
    op.create_index(op.f('ix_role_role_id'), 'role', ['role_id'], unique=False)
    op.create_table('order',
    sa.Column('order_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.payment_id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.product_id'], ),
    sa.PrimaryKeyConstraint('order_id')
    )
    op.create_index(op.f('ix_order_order_id'), 'order', ['order_id'], unique=False)
    op.create_index(op.f('ix_order_payment_id'), 'order', ['payment_id'], unique=False)
    op.create_index(op.f('ix_order_product_id'), 'order', ['product_id'], unique=False)
    op.create_index(op.f('ix_order_quantity'), 'order', ['quantity'], unique=False)
    op.create_index(op.f('ix_order_user_id'), 'order', ['user_id'], unique=False)
    
    
    op.create_table('user',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fullname', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone', sa.Integer(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.role_id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_user_address'), 'user', ['address'], unique=False)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=False)
    op.create_index(op.f('ix_user_fullname'), 'user', ['fullname'], unique=False)
    op.create_index(op.f('ix_user_password'), 'user', ['password'], unique=False)
    op.create_index(op.f('ix_user_phone'), 'user', ['phone'], unique=False)
    op.create_index(op.f('ix_user_role_id'), 'user', ['role_id'], unique=False)
    op.create_index(op.f('ix_user_user_id'), 'user', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=False)
    
    
    
    
    try:
        csv_file_path = 'role.csv'  # Replace with the actual file path
        # Read the CSV file using pandas
        df = pd.read_csv(csv_file_path)
        # Get the current database connection from Alembic
        connection = op.get_bind()
        # Step 4: Insert data from DataFrame into the 'role' table
        for _, row in df.iterrows():
            # Prepare the insert SQL query
            insert_query = text("INSERT INTO role (name) VALUES (:name)")
            connection.execute(insert_query, {"name": row['name']})  # Assuming 'name' is a column in your CSV

        print(f"Data successfully imported from {csv_file_path}")
    except Exception as e:
        print(f"Error importing data: {e}")
    
    try:
        # Read the CSV file using pandas
        csv_file_path = 'user.csv'  # Replace with actual file path
        df = pd.read_csv(csv_file_path)

        # Get the current database connection from Alembic
        connection = op.get_bind()

        # Insert data into the 'user' table
        for _, row in df.iterrows():
            # Prepare the insert SQL query
            insert_query = text("""
                INSERT INTO "user" (fullname, address, email, phone, username, password, role_id)
                VALUES (:fullname, :address, :email, :phone, :username, :password, :role_id)
            """)

            # Execute the insert query with the data
            connection.execute(insert_query, {
                "fullname": row['fullname'],
                "address": row['address'],
                "email": row['email'],
                "phone": row['phone'],
                "username": row['username'],
                "password": row['password'],  # Insert plain password as it is
                "role_id": row['role_id'],  # Ensure role_id corresponds to a valid role in the role table
            })

        print(f"User data imported successfully from {csv_file_path}")
    except Exception as e:
        print(f"Error importing User data: {e}")
        
        
        
    try:
        csv_file_path = 'Payment_csv.csv'  # Replace with the actual file path
        # Read the CSV file using pandas
        df = pd.read_csv(csv_file_path)
        
        # Get the current database connection from Alembic
        connection = op.get_bind()
        
        # Step 4: Insert data from DataFrame into the 'payment' table
        for _, row in df.iterrows():
            # Prepare the insert SQL query
            insert_query = text("INSERT INTO payment (type) VALUES (:type)")
            connection.execute(insert_query, {"type": row['type']})  # Assuming 'type' is a column in your CSV
        
        print(f"Payment data successfully imported from {csv_file_path}")
    
    except Exception as e:
        print(f"Error importing data: {e}")
        
        
        
        
        
    try:
        csv_file_path = 'product_df3.csv'  # Replace with the actual file path
        # Read the CSV file using pandas
        df = pd.read_csv(csv_file_path)
        
        # Get the current database connection from Alembic
        connection = op.get_bind()

        # Step 4: Insert data from DataFrame into the 'product' table
        for _, row in df.iterrows():
            # Prepare the insert SQL query
            insert_query = text("""
                INSERT INTO product (product_id, name, department, clothing, type_of_clothing, price, color)
                VALUES (:product_id, :name, :department, :clothing, :type_of_clothing, :price, :color)
            """)
            # Bind the CSV columns to the query parameters
            connection.execute(insert_query, {
                "product_id": row['product_id'],
                "name": row['name'],
                "department": row['department'],
                "clothing": row['clothing'],
                "type_of_clothing": row['type_of_clothing'],
                "price": row['price'],
                "color": row['color']
            })

        print(f"Product data successfully imported from {csv_file_path}")
    
    except Exception as e:
        print(f"Error importing Product data: {e}")
        
        
        
        
        
    try:
        # Path to your CSV file
        csv_file_path = 'order.csv'  # Replace with your actual CSV file path
        
        # Read the CSV file using pandas
        df = pd.read_csv(csv_file_path)
        
        # Get the current database connection from Alembic
        connection = op.get_bind()

        # Step: Insert data from DataFrame into the 'order' table
        for _, row in df.iterrows():
            user_id = int(row['user_id'])
            quantity = int(row['quantity'])
            payment_id = int(row['payment_id'])
            product_id = int(row['product_id'])
            # Prepare the insert SQL query for the 'order' table
            insert_query = text("""
                INSERT INTO "order" (user_id, quantity, payment_id, product_id)
                VALUES (:user_id, :quantity, :payment_id, :product_id)
            """)
            # Bind CSV columns to the query parameters
            connection.execute(insert_query, {
                "user_id": user_id,
                "quantity": quantity,
                "payment_id": payment_id,
                "product_id": product_id,
            })

        print(f"Order data successfully imported from {csv_file_path}")
    
    except Exception as e:
        print(f"Error importing Order data: {e}")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_role_id'), table_name='user')
    op.drop_index(op.f('ix_user_phone'), table_name='user')
    op.drop_index(op.f('ix_user_password'), table_name='user')
    op.drop_index(op.f('ix_user_fullname'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_index(op.f('ix_user_address'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_order_user_id'), table_name='order')
    op.drop_index(op.f('ix_order_quantity'), table_name='order')
    op.drop_index(op.f('ix_order_product_id'), table_name='order')
    op.drop_index(op.f('ix_order_payment_id'), table_name='order')
    op.drop_index(op.f('ix_order_order_id'), table_name='order')
    op.drop_table('order')
    op.drop_index(op.f('ix_role_role_id'), table_name='role')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_product_type_of_clothing'), table_name='product')
    op.drop_index(op.f('ix_product_product_id'), table_name='product')
    op.drop_index(op.f('ix_product_price'), table_name='product')
    op.drop_index(op.f('ix_product_name'), table_name='product')
    op.drop_index(op.f('ix_product_department'), table_name='product')
    op.drop_index(op.f('ix_product_color'), table_name='product')
    op.drop_index(op.f('ix_product_clothing'), table_name='product')
    op.drop_table('product')
    op.drop_index(op.f('ix_payment_type'), table_name='payment')
    op.drop_index(op.f('ix_payment_payment_id'), table_name='payment')
    op.drop_table('payment')
    # ### end Alembic commands ###
